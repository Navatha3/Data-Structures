#include<stdlib.h>
#include<stdio.h>
typedef struct Node
{
        int key;
        struct Node *l,*r;
}Node;
Node *root=NULL;
Node *getnode()
{
        Node *new=(Node *)malloc(sizeof(Node));
        new->l=NULL;
        new->r=NULL;
        return new;
}
Node *insert(Node *node,int key)
{
        if(root==NULL)
        {
                Node *new=getnode();
                new->key=key;
                root=new;
        }
        else if(node==NULL)
        {
                Node *new=getnode();
                new->key=key;
                node=new;
        }
        else if(key < node->key)
                node->l = insert(node->l,key);
        else
                node->r = insert(node->r,key);
        return node;
}
void inorder(Node *root)
{
        if(root!=NULL)
        {
                inorder(root->l);
                printf("%5d",root->key);
                inorder(root->r);
        }
}
void preorder(Node *root)
{
        if(root!=NULL)
        {
                printf("%5d",root->key);
                preorder(root->l);
                preorder(root->r);
        }
}
void postorder(Node *root)
{
        if(root!=NULL)
        {
                postorder(root->l);
                postorder(root->r);
                printf("%5d",root->key);
        }
}
void main()
{
        int n,key,ch,i,data;
        Node *k;
        while(1)
        {
                printf("\n 1.insert \n2.inorder \n 3.preorder \n 4.postorder\n 5.exit");
                printf("\n enter option");
                scanf("%d",&ch);
                switch(ch)
                {
                        case 1:printf("\n enter key to insert");
                               scanf("%d",&key);
                               insert(root,key);
                               break;

                        case 2:printf("\n inorder traversal");
                               inorder(root);
                               break;
                        case 3:printf("\n preorder traversal");
                               preorder(root);
                               break;
                        case 4:printf("\n postorder traversal");
                               postorder(root);
                               break;
                        case 5:exit(-1);
                }
        }
}
